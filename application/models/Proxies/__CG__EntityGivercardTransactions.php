<?php

namespace DoctrineProxies\__CG__\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class GivercardTransactions extends \Entity\GivercardTransactions implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'from_user_id', 'to_user_id', 'to_user_fb_id', 'to_email', 'cof_id', 'amount', 'balance_amount', 'message', 'date_created', 'is_notified', 'is_used');
        }

        return array('__isInitialized__', 'id', 'from_user_id', 'to_user_id', 'to_user_fb_id', 'to_email', 'cof_id', 'amount', 'balance_amount', 'message', 'date_created', 'is_notified', 'is_used');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (GivercardTransactions $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setFromUserId($from_user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFromUserId', array($from_user));

        return parent::setFromUserId($from_user);
    }

    /**
     * {@inheritDoc}
     */
    public function getFromUserId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFromUserId', array());

        return parent::getFromUserId();
    }

    /**
     * {@inheritDoc}
     */
    public function getFromUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFromUser', array());

        return parent::getFromUser();
    }

    /**
     * {@inheritDoc}
     */
    public function isFrom(\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isFrom', array($user));

        return parent::isFrom($user);
    }

    /**
     * {@inheritDoc}
     */
    public function isTo(\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isTo', array($user));

        return parent::isTo($user);
    }

    /**
     * {@inheritDoc}
     */
    public function isFacebookFriend()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isFacebookFriend', array());

        return parent::isFacebookFriend();
    }

    /**
     * {@inheritDoc}
     */
    public function getTo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTo', array());

        return parent::getTo();
    }

    /**
     * {@inheritDoc}
     */
    public function getToUserFb()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getToUserFb', array());

        return parent::getToUserFb();
    }

    /**
     * {@inheritDoc}
     */
    public function setToUser(\Entity\User $to_user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setToUser', array($to_user));

        return parent::setToUser($to_user);
    }

    /**
     * {@inheritDoc}
     */
    public function setToUserId($to_user_id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setToUserId', array($to_user_id));

        return parent::setToUserId($to_user_id);
    }

    /**
     * {@inheritDoc}
     */
    public function getToUserId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getToUserId', array());

        return parent::getToUserId();
    }

    /**
     * {@inheritDoc}
     */
    public function getToUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getToUser', array());

        return parent::getToUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setToUserFbId($to_user_fb_id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setToUserFbId', array($to_user_fb_id));

        return parent::setToUserFbId($to_user_fb_id);
    }

    /**
     * {@inheritDoc}
     */
    public function getToUserFbId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getToUserFbId', array());

        return parent::getToUserFbId();
    }

    /**
     * {@inheritDoc}
     */
    public function setToUserFb(\Entity\FacebookFriend $to_user_fb)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setToUserFb', array($to_user_fb));

        return parent::setToUserFb($to_user_fb);
    }

    /**
     * {@inheritDoc}
     */
    public function setToEmail($to_email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setToEmail', array($to_email));

        return parent::setToEmail($to_email);
    }

    /**
     * {@inheritDoc}
     */
    public function getToEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getToEmail', array());

        return parent::getToEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setCofId($cof_id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCofId', array($cof_id));

        return parent::setCofId($cof_id);
    }

    /**
     * {@inheritDoc}
     */
    public function getCofId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCofId', array());

        return parent::getCofId();
    }

    /**
     * {@inheritDoc}
     */
    public function setAmount($amount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAmount', array($amount));

        return parent::setAmount($amount);
    }

    /**
     * {@inheritDoc}
     */
    public function getAmount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAmount', array());

        return parent::getAmount();
    }

    /**
     * {@inheritDoc}
     */
    public function setBalanceAmount($balance_amount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBalanceAmount', array($balance_amount));

        return parent::setBalanceAmount($balance_amount);
    }

    /**
     * {@inheritDoc}
     */
    public function getBalanceAmount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBalanceAmount', array());

        return parent::getBalanceAmount();
    }

    /**
     * {@inheritDoc}
     */
    public function setMessage($message)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMessage', array($message));

        return parent::setMessage($message);
    }

    /**
     * {@inheritDoc}
     */
    public function getMessage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMessage', array());

        return parent::getMessage();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateCreated($date_created)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateCreated', array($date_created));

        return parent::setDateCreated($date_created);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateCreated', array());

        return parent::getDateCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsNotified($is_notified)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsNotified', array($is_notified));

        return parent::setIsNotified($is_notified);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsNotified()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsNotified', array());

        return parent::getIsNotified();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsUsed($is_used)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsUsed', array($is_used));

        return parent::setIsUsed($is_used);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsUsed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsUsed', array());

        return parent::getIsUsed();
    }

    /**
     * {@inheritDoc}
     */
    public function updateGivercardAmount($donation_amount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updateGivercardAmount', array($donation_amount));

        return parent::updateGivercardAmount($donation_amount);
    }

    /**
     * {@inheritDoc}
     */
    public function get_class_without_namespace()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'get_class_without_namespace', array());

        return parent::get_class_without_namespace();
    }

}
