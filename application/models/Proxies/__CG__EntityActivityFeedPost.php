<?php

namespace DoctrineProxies\__CG__\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ActivityFeedPost extends \Entity\ActivityFeedPost implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'text', 'date', 'from_user_id', 'to_user_id', 'charity_id', 'scrambled_id', 'is_deleted', 'external_url');
        }

        return array('__isInitialized__', 'id', 'text', 'date', 'from_user_id', 'to_user_id', 'charity_id', 'scrambled_id', 'is_deleted', 'external_url');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ActivityFeedPost $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function onPrePersist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'onPrePersist', array());

        return parent::onPrePersist();
    }

    /**
     * {@inheritDoc}
     */
    public function preRemove()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'preRemove', array());

        return parent::preRemove();
    }

    /**
     * {@inheritDoc}
     */
    public function setDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', array($date));

        return parent::setDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', array());

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateDt(\DateTime $date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateDt', array($date));

        return parent::setDateDt($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateDt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateDt', array());

        return parent::getDateDt();
    }

    /**
     * {@inheritDoc}
     */
    public function setFromUserId($from_user_id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFromUserId', array($from_user_id));

        return parent::setFromUserId($from_user_id);
    }

    /**
     * {@inheritDoc}
     */
    public function getFromUserId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFromUserId', array());

        return parent::getFromUserId();
    }

    /**
     * {@inheritDoc}
     */
    public function setFromUser(\Entity\User $from_user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFromUser', array($from_user));

        return parent::setFromUser($from_user);
    }

    /**
     * {@inheritDoc}
     */
    public function getFromUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFromUser', array());

        return parent::getFromUser();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setText($text)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setText', array($text));

        return parent::setText($text);
    }

    /**
     * {@inheritDoc}
     */
    public function getText($options = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getText', array($options));

        return parent::getText($options);
    }

    /**
     * {@inheritDoc}
     */
    public function setToUserId($to_user_id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setToUserId', array($to_user_id));

        return parent::setToUserId($to_user_id);
    }

    /**
     * {@inheritDoc}
     */
    public function getToUserId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getToUserId', array());

        return parent::getToUserId();
    }

    /**
     * {@inheritDoc}
     */
    public function setToUser($to_user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setToUser', array($to_user));

        return parent::setToUser($to_user);
    }

    /**
     * {@inheritDoc}
     */
    public function getToUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getToUser', array());

        return parent::getToUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setCharityId($charity_id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCharityId', array($charity_id));

        return parent::setCharityId($charity_id);
    }

    /**
     * {@inheritDoc}
     */
    public function getCharityId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCharityId', array());

        return parent::getCharityId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCharity(\Entity\Charity $charity = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCharity', array($charity));

        return parent::setCharity($charity);
    }

    /**
     * {@inheritDoc}
     */
    public function getCharity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCharity', array());

        return parent::getCharity();
    }

    /**
     * {@inheritDoc}
     */
    public function hasCharity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasCharity', array());

        return parent::hasCharity();
    }

    /**
     * {@inheritDoc}
     */
    public function getImages()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImages', array());

        return parent::getImages();
    }

    /**
     * {@inheritDoc}
     */
    public function getYoutubeVideos()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getYoutubeVideos', array());

        return parent::getYoutubeVideos();
    }

    /**
     * {@inheritDoc}
     */
    public function setScrambledId($scrambled_id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setScrambledId', array($scrambled_id));

        return parent::setScrambledId($scrambled_id);
    }

    /**
     * {@inheritDoc}
     */
    public function getScrambledId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getScrambledId', array());

        return parent::getScrambledId();
    }

    /**
     * {@inheritDoc}
     */
    public function getFullUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFullUrl', array());

        return parent::getFullUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', array());

        return parent::getUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function hideFromUser(\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hideFromUser', array($user));

        return parent::hideFromUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function undoHideFromUser(\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'undoHideFromUser', array($user));

        return parent::undoHideFromUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteFromUser(\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'deleteFromUser', array($user));

        return parent::deleteFromUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function undoDeleteFromUser(\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'undoDeleteFromUser', array($user));

        return parent::undoDeleteFromUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function setIsDeleted($is_deleted)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsDeleted', array($is_deleted));

        return parent::setIsDeleted($is_deleted);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsDeleted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsDeleted', array());

        return parent::getIsDeleted();
    }

    /**
     * {@inheritDoc}
     */
    public function isDeleted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDeleted', array());

        return parent::isDeleted();
    }

    /**
     * {@inheritDoc}
     */
    public function setExternalUrl($external_url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExternalUrl', array($external_url));

        return parent::setExternalUrl($external_url);
    }

    /**
     * {@inheritDoc}
     */
    public function getExternalUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExternalUrl', array());

        return parent::getExternalUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function get_class_without_namespace()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'get_class_without_namespace', array());

        return parent::get_class_without_namespace();
    }

}
