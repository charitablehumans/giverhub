<?php

namespace DoctrineProxies\__CG__\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Bet extends \Entity\Bet implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'statuses', 'claims', 'id', 'name', 'terms', 'amount', 'user', 'charity', 'determinationDate', 'status', 'createdDate', 'claim', 'open');
        }

        return array('__isInitialized__', 'statuses', 'claims', 'id', 'name', 'terms', 'amount', 'user', 'charity', 'determinationDate', 'status', 'createdDate', 'claim', 'open');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Bet $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function jsonSerialize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'jsonSerialize', array());

        return parent::jsonSerialize();
    }

    /**
     * {@inheritDoc}
     */
    public function onPrePersist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'onPrePersist', array());

        return parent::onPrePersist();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setAmount($amount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAmount', array($amount));

        return parent::setAmount($amount);
    }

    /**
     * {@inheritDoc}
     */
    public function getAmount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAmount', array());

        return parent::getAmount();
    }

    /**
     * {@inheritDoc}
     */
    public function getOpen()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOpen', array());

        return parent::getOpen();
    }

    /**
     * {@inheritDoc}
     */
    public function setOpen($open)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOpen', array($open));

        return parent::setOpen($open);
    }

    /**
     * {@inheritDoc}
     */
    public function isOpen()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isOpen', array());

        return parent::isOpen();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedDate', array());

        return parent::getCreatedDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedDate(\DateTime $createdDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedDate', array($createdDate));

        return parent::setCreatedDate($createdDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeterminationDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeterminationDate', array());

        return parent::getDeterminationDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setDeterminationDate(\DateTime $determinationDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeterminationDate', array($determinationDate));

        return parent::setDeterminationDate($determinationDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getCharity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCharity', array());

        return parent::getCharity();
    }

    /**
     * {@inheritDoc}
     */
    public function setCharity(\Entity\Charity $charity)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCharity', array($charity));

        return parent::setCharity($charity);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', array());

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl($full = true)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', array($full));

        return parent::getUrl($full);
    }

    /**
     * {@inheritDoc}
     */
    public function getLink($full = true)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLink', array($full));

        return parent::getLink($full);
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', array($user));

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', array($status));

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', array());

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setTerms($terms)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTerms', array($terms));

        return parent::setTerms($terms);
    }

    /**
     * {@inheritDoc}
     */
    public function getTerms($options = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTerms', array($options));

        return parent::getTerms($options);
    }

    /**
     * {@inheritDoc}
     */
    public function getSummary(\Entity\User $user, $links)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSummary', array($user, $links));

        return parent::getSummary($user, $links);
    }

    /**
     * {@inheritDoc}
     */
    public function setClaim($claim)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClaim', array($claim));

        return parent::setClaim($claim);
    }

    /**
     * {@inheritDoc}
     */
    public function getClaim()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClaim', array());

        return parent::getClaim();
    }

    /**
     * {@inheritDoc}
     */
    public function isTimeForDetermination()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isTimeForDetermination', array());

        return parent::isTimeForDetermination();
    }

    /**
     * {@inheritDoc}
     */
    public function getFriends()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFriends', array());

        return parent::getFriends();
    }

    /**
     * {@inheritDoc}
     */
    public function isToUser(\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isToUser', array($user));

        return parent::isToUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getFriend(\Entity\User $user, $throw = true)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFriend', array($user, $throw));

        return parent::getFriend($user, $throw);
    }

    /**
     * {@inheritDoc}
     */
    public function getMyClaim(\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMyClaim', array($user));

        return parent::getMyClaim($user);
    }

    /**
     * {@inheritDoc}
     */
    public function get_class_without_namespace()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'get_class_without_namespace', array());

        return parent::get_class_without_namespace();
    }

}
