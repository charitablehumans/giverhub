<?php

namespace DoctrineProxies\__CG__\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Challenge extends \Entity\Challenge implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'name', 'description', 'youtubeVideoId', 'createdDate', 'updatedDate', 'fromUser', 'charity', 'dedication');
        }

        return array('__isInitialized__', 'id', 'name', 'description', 'youtubeVideoId', 'createdDate', 'updatedDate', 'fromUser', 'charity', 'dedication');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Challenge $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function onPrePersist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'onPrePersist', array());

        return parent::onPrePersist();
    }

    /**
     * {@inheritDoc}
     */
    public function onPreUpdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'onPreUpdate', array());

        return parent::onPreUpdate();
    }

    /**
     * {@inheritDoc}
     */
    public function jsonSerialize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'jsonSerialize', array());

        return parent::jsonSerialize();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCharity(\Entity\Charity $charity)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCharity', array($charity));

        return parent::setCharity($charity);
    }

    /**
     * {@inheritDoc}
     */
    public function getCharity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCharity', array());

        return parent::getCharity();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedDate(\DateTime $createdDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedDate', array($createdDate));

        return parent::setCreatedDate($createdDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedDate', array());

        return parent::getCreatedDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', array($description));

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription($options = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', array($options));

        return parent::getDescription($options);
    }

    /**
     * {@inheritDoc}
     */
    public function setFromUser(\Entity\User $fromUser)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFromUser', array($fromUser));

        return parent::setFromUser($fromUser);
    }

    /**
     * {@inheritDoc}
     */
    public function getFromUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFromUser', array());

        return parent::getFromUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function getNameWithChallenge()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNameWithChallenge', array());

        return parent::getNameWithChallenge();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedDate(\DateTime $updatedDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedDate', array($updatedDate));

        return parent::setUpdatedDate($updatedDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedDate', array());

        return parent::getUpdatedDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setYoutubeVideoId($youtubeVideoId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setYoutubeVideoId', array($youtubeVideoId));

        return parent::setYoutubeVideoId($youtubeVideoId);
    }

    /**
     * {@inheritDoc}
     */
    public function getYoutubeVideoId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getYoutubeVideoId', array());

        return parent::getYoutubeVideoId();
    }

    /**
     * {@inheritDoc}
     */
    public function setFriendsFromPost(array $emails)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFriendsFromPost', array($emails));

        return parent::setFriendsFromPost($emails);
    }

    /**
     * {@inheritDoc}
     */
    public function isDraft()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDraft', array());

        return parent::isDraft();
    }

    /**
     * {@inheritDoc}
     */
    public function getChallengeUsers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChallengeUsers', array());

        return parent::getChallengeUsers();
    }

    /**
     * {@inheritDoc}
     */
    public function send()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'send', array());

        return parent::send();
    }

    /**
     * {@inheritDoc}
     */
    public function isToUser(\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isToUser', array($user));

        return parent::isToUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getToChallengeUser(\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getToChallengeUser', array($user));

        return parent::getToChallengeUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserStatus(\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserStatus', array($user));

        return parent::getUserStatus($user);
    }

    /**
     * {@inheritDoc}
     */
    public function setUserStatus(\Entity\User $user, $status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserStatus', array($user, $status));

        return parent::setUserStatus($user, $status);
    }

    /**
     * {@inheritDoc}
     */
    public function accept_reject(\Entity\User $user, $accept)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'accept_reject', array($user, $accept));

        return parent::accept_reject($user, $accept);
    }

    /**
     * {@inheritDoc}
     */
    public function accept(\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'accept', array($user));

        return parent::accept($user);
    }

    /**
     * {@inheritDoc}
     */
    public function reject(\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'reject', array($user));

        return parent::reject($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getFullUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFullUrl', array());

        return parent::getFullUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl($full = true)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', array($full));

        return parent::getUrl($full);
    }

    /**
     * {@inheritDoc}
     */
    public function getLink($full = true)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLink', array($full));

        return parent::getLink($full);
    }

    /**
     * {@inheritDoc}
     */
    public function setDedication($dedication)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDedication', array($dedication));

        return parent::setDedication($dedication);
    }

    /**
     * {@inheritDoc}
     */
    public function getDedication()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDedication', array());

        return parent::getDedication();
    }

    /**
     * {@inheritDoc}
     */
    public function get_class_without_namespace()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'get_class_without_namespace', array());

        return parent::get_class_without_namespace();
    }

}
