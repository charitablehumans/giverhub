<?php

namespace DoctrineProxies\__CG__\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ClosedBetaSignup extends \Entity\ClosedBetaSignup implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'email', 'signup_date', 'approved', 'approved_by', 'approved_date');
        }

        return array('__isInitialized__', 'id', 'email', 'signup_date', 'approved', 'approved_by', 'approved_date');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ClosedBetaSignup $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setApproved($approved)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setApproved', array($approved));

        return parent::setApproved($approved);
    }

    /**
     * {@inheritDoc}
     */
    public function getApproved()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getApproved', array());

        return parent::getApproved();
    }

    /**
     * {@inheritDoc}
     */
    public function setApprovedBy(\Entity\User $approvedBy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setApprovedBy', array($approvedBy));

        return parent::setApprovedBy($approvedBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getApprovedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getApprovedBy', array());

        return parent::getApprovedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setApprovedDate($approved_date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setApprovedDate', array($approved_date));

        return parent::setApprovedDate($approved_date);
    }

    /**
     * {@inheritDoc}
     */
    public function getApprovedDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getApprovedDate', array());

        return parent::getApprovedDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setApprovedDateDt(\DateTime $approved_date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setApprovedDateDt', array($approved_date));

        return parent::setApprovedDateDt($approved_date);
    }

    /**
     * {@inheritDoc}
     */
    public function getApprovedDateDt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getApprovedDateDt', array());

        return parent::getApprovedDateDt();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', array($email));

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', array());

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setSignupDate($signup_date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSignupDate', array($signup_date));

        return parent::setSignupDate($signup_date);
    }

    /**
     * {@inheritDoc}
     */
    public function getSignupDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSignupDate', array());

        return parent::getSignupDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setSignupDateDt(\DateTime $signup_date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSignupDateDt', array($signup_date));

        return parent::setSignupDateDt($signup_date);
    }

    /**
     * {@inheritDoc}
     */
    public function getSignupDateDt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSignupDateDt', array());

        return parent::getSignupDateDt();
    }

    /**
     * {@inheritDoc}
     */
    public function approve()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'approve', array());

        return parent::approve();
    }

    /**
     * {@inheritDoc}
     */
    public function get_class_without_namespace()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'get_class_without_namespace', array());

        return parent::get_class_without_namespace();
    }

}
