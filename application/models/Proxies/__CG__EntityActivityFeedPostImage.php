<?php

namespace DoctrineProxies\__CG__\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ActivityFeedPostImage extends \Entity\ActivityFeedPostImage implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'temp_id', 'image_name', 'image_thumb', 'activity_feed_post_id', 'upload_date', 'user_id');
        }

        return array('__isInitialized__', 'id', 'temp_id', 'image_name', 'image_thumb', 'activity_feed_post_id', 'upload_date', 'user_id');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ActivityFeedPostImage $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getImageName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImageName', array());

        return parent::getImageName();
    }

    /**
     * {@inheritDoc}
     */
    public function getImageThumb()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImageThumb', array());

        return parent::getImageThumb();
    }

    /**
     * {@inheritDoc}
     */
    public function setImageName($imageName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImageName', array($imageName));

        return parent::setImageName($imageName);
    }

    /**
     * {@inheritDoc}
     */
    public function setImageThumb($imageThumb)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImageThumb', array($imageThumb));

        return parent::setImageThumb($imageThumb);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', array());

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', array($user));

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function setUploadDate($uploadDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUploadDate', array($uploadDate));

        return parent::setUploadDate($uploadDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getUploadDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUploadDate', array());

        return parent::getUploadDate();
    }

    /**
     * {@inheritDoc}
     */
    public function getUploadDateTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUploadDateTime', array());

        return parent::getUploadDateTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setUploadDateTime(\DateTime $uploadDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUploadDateTime', array($uploadDate));

        return parent::setUploadDateTime($uploadDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl($include_hostname = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', array($include_hostname));

        return parent::getUrl($include_hostname);
    }

    /**
     * {@inheritDoc}
     */
    public function getThumbUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getThumbUrl', array());

        return parent::getThumbUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setActivityFeedPostId($activity_feed_post_id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActivityFeedPostId', array($activity_feed_post_id));

        return parent::setActivityFeedPostId($activity_feed_post_id);
    }

    /**
     * {@inheritDoc}
     */
    public function getActivityFeedPostId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActivityFeedPostId', array());

        return parent::getActivityFeedPostId();
    }

    /**
     * {@inheritDoc}
     */
    public function setActivityFeedPost(\Entity\ActivityFeedPost $activity_feed_post)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActivityFeedPost', array($activity_feed_post));

        return parent::setActivityFeedPost($activity_feed_post);
    }

    /**
     * {@inheritDoc}
     */
    public function getActivityFeedPost()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActivityFeedPost', array());

        return parent::getActivityFeedPost();
    }

    /**
     * {@inheritDoc}
     */
    public function setTempId($temp_id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTempId', array($temp_id));

        return parent::setTempId($temp_id);
    }

    /**
     * {@inheritDoc}
     */
    public function getTempId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTempId', array());

        return parent::getTempId();
    }

    /**
     * {@inheritDoc}
     */
    public function get_class_without_namespace()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'get_class_without_namespace', array());

        return parent::get_class_without_namespace();
    }

}
